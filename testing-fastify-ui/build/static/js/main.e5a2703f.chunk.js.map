{"version":3,"sources":["constants.ts","axiosConfig/axiosConfig.ts","codeGenFE/index.ts","components/Login/Login.tsx","rq-hooks/useLogin.ts","components/Register/Register.tsx","rq-hooks/useRegister.ts","utils/customFetcher.ts","context/allContext/SubscriptionContext.tsx","components/Me/Me.tsx","App.tsx","context/providerComposer.tsx","reportWebVitals.ts","index.tsx"],"names":["REST_BASE_ENDPOINT","axios","Axios","create","headers","withCredentials","CacheControlScope","Login","options","useState","email","setEmail","password","setPassword","mutate","onSuccess","data","console","log","onError","err","useMutation","loginInput","a","post","response","Error","message","onSubmit","e","preventDefault","type","value","onChange","target","Register","registerInput","useGetUserQuery","variables","useQuery","query","body","JSON","stringify","res","errors","bind","SubscriptionContext","createContext","SubscriptionProvider","props","count","setCount","useQueryClient","useEffect","subscription","SubscriptionClient","reconnect","lazy","connectionCallback","error","request","subscribe","next","unsubscribe","Provider","children","Me","useContext","App","className","exact","path","component","ProviderComposer","contexts","reduceRight","kids","parent","React","cloneElement","ContextProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","queryClient","QueryClient","ReactDOM","render","QueryClientProvider","client","StrictMode","initialIsOpen","document","getElementById"],"mappings":"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","file":"static/js/main.e5a2703f.chunk.js","sourcesContent":["export const REST_BASE_ENDPOINT =\n  process.env.NODE_ENV === \"production\"\n    ? `https://hydra.nowigence.ai/api`\n    : \"http://localhost:5000/api\";\n\nexport const REST_BASE_ENDPOINT_CADDY =\n  process.env.NODE_ENV === \"production\"\n    ? `https://hydra.nowigence.ai/api`\n    : \"http://localhost:5000/api\";\n// :\"https://fastify-auth.dev\";\n\nexport const URL =\n  process.env.NODE_ENV === \"production\"\n    ? \"hydra.nowigence.ai/api\"\n    : \"localhost:3000/api\";\n\nexport const GQL_ENDPOINT =\n  process.env.NODE_ENV === \"production\"\n    ? `https://hydra.nowigence.ai/api/graphql`\n    : \"http://localhost:5000/api/graphql\";\n\nexport const GQL_SUBSCRIPTION_ENDPOINT =\n  process.env.NODE_ENV === \"production\"\n    ? `wss://hydra.nowigence.ai/api/graphql`\n    : \"ws://localhost:5000/api/graphql\";\n","import Axios from \"axios\";\n// import { REST_BASE_ENDPOINT_CADDY } from \"../constants\";\n// import { URL } from \"../constants\";\n// console.log(\"URL\", URL);\n\n// YOU CAN'T \"FIX THIS\".  To save yourself time leave this file.\n// If you failed to heed our warning please up the counter below\n// Counter: 5\nexport const axios = Axios.create({\n  headers: {\n    \"Content-Type\": \"application/json\",\n  },\n  // credentials: \"include\",\n  withCredentials: true,\n});\n\n// axios.interceptors.request.use((config) => {\n//   const token = localStorage.getItem(\"accessToken\");\n//   if (token) {\n//     config.headers.Authorization = `Bearer ${token}`;\n//   }\n//   return config;\n// });\n\n// axios.interceptors.response.use(\n//   (response) => {\n//     // Any status code that lie within the range of 2xx cause this function to trigger\n//     // Do something with response data\n//     return response;\n//   },\n//   (error) => {\n//     console.log(\"error from interceptors\", error);\n//     // Any status codes that falls outside the range of 2xx cause this function to trigger\n//     // Do something with response error\n//     console.log(\"error.response.status\", error.response.status);\n//     if (401 === error.response.status) {\n//       try {\n//         const getNewTokens = async () => {\n//           const data = await axios.get(`${REST_BASE_ENDPOINT}/auth/refresh`);\n//           if (data?.data?.data) {\n//             console.log(\"data.data.data\", data.data.data);\n//             localStorage.setItem(\"accessToken\", data.data.data.accessToken);\n//             return data.data.data;\n//           }\n//         };\n//         getNewTokens();\n//       } catch (err) {\n//         console.log(\"err from catchblock axiosConfig\", err);\n//         console.log(\"NEED TO LOG OUT HERE REFRESH IS BAD\");\n//       }\n//     }\n//     // this currently stops my infinite loop but i don't love it. we may need to\n//     // actually use 403 for other things. leaving for the mean time. need to\n//     // move forward for now\n//     if (403 === error.response.status) {\n//       console.log(\"LOG USER OUT HERE NOW\");\n//       localStorage.removeItem(\"accessToken\");\n//       // window.location.replace(\"http://localhost:3000\");\n//       //TODO: FIX THIS ONCE WORKING\n//       window.location.replace(`http://${URL}`);\n//     }\n//     return Promise.reject(error);\n//   }\n// );\n","import { useQuery, UseQueryOptions } from 'react-query';\nimport { fetcher } from '../utils/customFetcher';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `Upload` scalar type represents a file upload. */\n  Upload: any;\n};\n\n\nexport enum CacheControlScope {\n  Public = 'PUBLIC',\n  Private = 'PRIVATE'\n}\n\nexport type Query = {\n  __typename?: 'Query';\n  getUser: User;\n};\n\n\nexport type QueryGetUserArgs = {\n  email: Scalars['String'];\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  sayHey?: Maybe<Scalars['String']>;\n};\n\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['String'];\n  email: Scalars['String'];\n};\n\nexport type GetUserQueryVariables = Exact<{\n  email: Scalars['String'];\n}>;\n\n\nexport type GetUserQuery = (\n  { __typename?: 'Query' }\n  & { getUser: (\n    { __typename?: 'User' }\n    & Pick<User, 'id' | 'email'>\n  ) }\n);\n\n\nexport const GetUserDocument = `\n    query getUser($email: String!) {\n  getUser(email: $email) {\n    id\n    email\n  }\n}\n    `;\nexport const useGetUserQuery = <\n      TData = GetUserQuery,\n      TError = unknown\n    >(\n      variables: GetUserQueryVariables, \n      options?: UseQueryOptions<GetUserQuery, TError, TData>\n    ) => \n    useQuery<GetUserQuery, TError, TData>(\n      ['getUser', variables],\n      fetcher<GetUserQuery, GetUserQueryVariables>(GetUserDocument).bind(null, variables),\n      options\n    );","import { useState } from \"react\";\nimport { useLogin } from \"../../rq-hooks\";\n\nconst Login = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { mutate } = useLogin({\n    onSuccess: (data: any) => {\n      console.log(\"data from login\", data);\n    },\n    onError: (err: any) => {\n      console.log(\"err from login\", err);\n    },\n  });\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        mutate({ email, password });\n      }}>\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <button type=\"submit\">Login</button>\n    </form>\n  );\n};\n\nexport default Login;\n","import { REST_BASE_ENDPOINT } from \"../constants\";\nimport { useMutation } from \"react-query\";\n// import axios from \"axios\";\nimport { axios } from \"../axiosConfig/axiosConfig\";\n\ninterface LoginInput {\n  email: string;\n  password: string;\n}\n\nexport function useLogin(options: any) {\n  console.log(\"running useLogin\");\n\n  return useMutation(async (loginInput: LoginInput) => {\n    try {\n      console.log(\"REST_BASE_ENDPOINT\", REST_BASE_ENDPOINT);\n      console.log(\"post\", `${REST_BASE_ENDPOINT}/login`);\n      const { data } = await axios.post(\n        `${REST_BASE_ENDPOINT}/login`,\n        loginInput\n      );\n      console.log(\"data from useLogin\", data);\n      if (data.data) {\n        return data.data;\n      }\n    } catch (err) {\n      console.log(\"err from useLogin\", err.response.data);\n      throw new Error(err.response.data.message);\n    }\n  }, options);\n}\n","import { useState } from \"react\";\nimport { useRegister } from \"../../rq-hooks\";\n\nconst Register = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const { mutate } = useRegister({\n    onSuccess: (data: any) => {\n      console.log(\"data from login\", data);\n    },\n    onError: (err: any) => {\n      console.log(\"err from login\", err);\n    },\n  });\n  return (\n    <form\n      onSubmit={(e) => {\n        e.preventDefault();\n        mutate({ email, password });\n      }}>\n      <input\n        type=\"email\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n      />\n      <input\n        type=\"password\"\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n      />\n      <button type=\"submit\">Register</button>\n    </form>\n  );\n};\n\nexport default Register;\n","import { REST_BASE_ENDPOINT } from \"../constants\";\nimport { useMutation } from \"react-query\";\n// import axios from \"axios\";\nimport { axios } from \"../axiosConfig/axiosConfig\";\n\ninterface RegisterInput {\n  email: string;\n  password: string;\n}\n\nexport function useRegister(options: any) {\n  console.log(\"running useRegister\");\n\n  return useMutation(async (registerInput: RegisterInput) => {\n    try {\n      const { data } = await axios.post(\n        `${REST_BASE_ENDPOINT}/register`,\n        registerInput\n      );\n      console.log(\"data from useRegister\", data);\n      if (data.data) {\n        return data.data;\n      }\n    } catch (err) {\n      console.log(\"err from useRegister\", err.response.data);\n      throw new Error(err.response.data.message);\n    }\n  }, options);\n}\n","import { GQL_ENDPOINT } from \"../constants\";\n// import { axios } from \"./axiosConfig\";\nimport { axios } from \"../axiosConfig/axiosConfig\";\n\nexport function fetcher<TData, TVariables>(\n  // requestInit: RequestInit,\n  query: string,\n  variables?: TVariables\n) {\n  return async (variables: any): Promise<TData> => {\n    try {\n      const res = await axios.post(GQL_ENDPOINT, {\n        query,\n        variables,\n        body: JSON.stringify({ query, variables }),\n      });\n\n      // console.log(\"res.data\", res?.data);\n      if (res?.data?.errors) {\n        throw res?.data?.errors[0].message;\n      }\n      return res?.data?.data;\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n","import { SubscriptionClient } from \"graphql-subscriptions-client\";\nimport React, { createContext, useContext, useEffect, useState } from \"react\";\nimport { useQueryClient } from \"react-query\";\n// import { GQL_SUBSCRIPTION_ENDPOINT } from \"../../../constants\";\nimport { GQL_SUBSCRIPTION_ENDPOINT } from \"../../constants\";\n// import { useUserContext } from \"../allContexts\";\n\n// @ts-ignore\nexport const SubscriptionContext = createContext();\n\nexport function SubscriptionProvider(props: any) {\n  const [count, setCount] = useState(0);\n  const qClient = useQueryClient();\n  // const { user } = useUserContext();\n\n  useEffect(() => {\n    console.log(\"subscription context running\");\n    // if (count) {\n    const query = `\n        subscription sayHey {\n              sayHey\n          }\n      `;\n\n    const client = new SubscriptionClient(GQL_SUBSCRIPTION_ENDPOINT, {\n      reconnect: true,\n      lazy: true, // only connect when there is a query\n      connectionCallback: (error) => {\n        error && console.error(error);\n        return;\n      },\n    });\n\n    const subscription = client.request({ query }).subscribe({\n      next({ data }: any) {\n        if (data) {\n          console.log(\"HERE:: data from subscription\", data);\n          // qClient.invalidateQueries(\"getUserNotes\");\n        }\n        return;\n      },\n    });\n\n    return () => subscription.unsubscribe();\n    // }\n    // return;\n    // }, [user]);\n  }, []);\n\n  return (\n    <SubscriptionContext.Provider value={{ count, setCount }}>\n      {props.children}\n    </SubscriptionContext.Provider>\n  );\n}\n\nexport const useSubscriptionContext = () => {\n  return useContext(SubscriptionContext);\n};\n","import { useEffect } from \"react\";\nimport { useGetUserQuery } from \"../../codeGenFE\";\nimport { useSubscriptionContext } from \"../../context/allContext\";\n\nconst Me = () => {\n  // @ts-ignore\n  const { count, setCount } = useSubscriptionContext();\n  const { data, error } = useGetUserQuery(\n    { email: \"hank@hank.com\" },\n    {\n      onSuccess: () => {\n        // console.log(\"onSuccess\");\n        // setCount(count + 1);\n      },\n    }\n  );\n\n  useEffect(() => {\n    console.log(\"HERE:: count\", count);\n  }, [count]);\n  console.log(\"data fro mme\", data);\n  console.log(\"err from me\", error);\n  return <div>Check console for data</div>;\n};\n\nexport default Me;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport Login from \"./components/Login/Login\";\nimport Register from \"./components/Register/Register\";\nimport Me from \"./components/Me/Me\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\" component={() => <Login />} />\n        <Route exact path=\"/register\" component={() => <Register />} />\n        <Route exact path=\"/myMemory\" component={() => <Me />} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { SubscriptionProvider } from \"../context/allContext\";\n\n// @ts-ignore\nfunction ProviderComposer({ contexts, children }) {\n  return contexts.reduceRight(\n    // @ts-ignore\n    (kids, parent) =>\n      React.cloneElement(parent, {\n        children: kids,\n      }),\n    children\n  );\n}\n\n//@ts-ignore\nfunction ContextProvider({ children }) {\n  return (\n    <ProviderComposer contexts={[<SubscriptionProvider />]}>\n      {children}\n    </ProviderComposer>\n  );\n}\n\nexport { ContextProvider };\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { ReactQueryDevtools } from \"react-query/devtools\";\nimport { ContextProvider } from \"./context/providerComposer\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <QueryClientProvider client={queryClient}>\n    <Router>\n      <ContextProvider>\n        <React.StrictMode>\n          <App />\n        </React.StrictMode>\n      </ContextProvider>\n      <ReactQueryDevtools initialIsOpen={false} />\n    </Router>\n  </QueryClientProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}